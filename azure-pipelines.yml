trigger:
- '*'

stages:
- stage: 'Build'
  displayName:'Build the web app'
  jobs:
  -job:'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
      demands:
      - npm

    variables:
      buildConfiguration: 'Release'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()

- stage: 'Dev'
displayName: 'Deploy to the dev environment'
dependsOn: Build
#  condition: 
#    and
#    (
#      succeeded(),
#      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
#    )
jobs:

- deployment: Deploy
  pool:
    vmImage: 'ubuntu-20.04'
  environment: dev
  variables:
  - group: Release
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          artifact: drop
        - task: AzureWebApp@1
          displayName: 'Azure App Service Deploy: website'
          inputs:
            azureSubscription: 'Resource Manager - FitnessApi - dev'
            appName: '$(WebAppNameDev)'
            package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'